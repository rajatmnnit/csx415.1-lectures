{
    "collab_server" : "",
    "contents" : "# Packrat usage\n\nThis document describes how to use and deploy a packrat project. \n\n\n\n# Packrat \n\n## Notes\n\n - Different OS have different .libPaths. All in `packrat/lib*` though\n - \n\n\n## Initialize \n\nIf your project is not already a packrat project, make it one using `packrat::init` and check that the repositories are correct.\n\n1. Initialize packrat \n\n    packrat::init() \n\n2. Check libPaths, repos\n\n    .libPaths() \n    packrat::repos_list() \n    packrat::get_opts()\n\n## Install Local Packages\n\nPackrat's package management kinda sucks unless all your packages come from CRAN\nor Github. The options for setting up local is difficult and confusing with several\ndiffering definitions of local packages. \n\n - CRAN/drat-like repository \n   This is for when your package is in something that looks like CRAN \n    - Install with `packrat::repos_add_local` & `install.packages`  \n    - Must have a PACKAGES file generated by tools::write_PACKAGES\n    - The DESCRIPTION file must have a `Repository: CRAN` line to identify it\n      it as a CRAN type package.\n    - Package installed through a drat-like repository may have to be\n      reinstalled/snapshot when the drat repository is disconnected.\n\n   Example:\n     > packrat::repos_add_local( drat = \"v:/library/drat\" )\n     > packrat::install( \"package\" )\n\n - Local Ad hoc repository \n   This is for when you have a package that is not a CRAN-like repository \n   and it is just in a local dev directory\n    - Install with `packrat::set_opts( local.repos == )` & packrat::install_local :\n    - Difficulties with packages with version numbers due to packrat::snapshot\n\n   Example:\n      > packrat::set_opts( local.repos = '../pkgs/' )\n      > packrat::install_local( \"pkg_name\" )\n\n - You may want to copy your pkgs directory into your app directory\n\n - [?] Local development repositories\n    - Install with `packrat::install`\n    - It's like devtools::install\n\n\n**For** ultra-portability, creates a DRAT repo at packrat/repo!\n\n### Local Sources \n\nLocal sources are directories which contain source files.\n\n1. Define local source directories  \n\n     packrat::set_opts( local.repos = c('./pkgs','~/code/r') ) \n     packrat::init() \n\n2. Install from sources  \n\n     devtools::install_local( \"path/to/pkgSource\" ) \n     packrat::install_local( \"package_ver.tar.gz\" ) \n     packrat::install( \"path/to/package/directory\" ) # For development packages.\n     install.packages( \"path/to/pkgSource_ver.tar.gz\", repos = NULL, type = \"source\", dependencies = FALSE ) \n\n**NB** \n - for `packrat::install_local` the full filename must be used and not the package name.\n - Dependencies must be loaded.\n\n3. Snapshot\n    packrat::status() \n    packrat::snapshot() \n\n4. If the local repository does not exist in the packrat project, this may need to be removed before bundling to evade packrat checking on a different host.\n\n     packrat::set_opts( local.repos = NULL ) \n\n\n### Local CRAN-like Repositories\n\nThe other form of local packages come from local repositories, CRAN-like repositories that exist on the local file system. These are like DRAT repositories that have been fixed with `tools::write_PACKAGES()`. Packages are installed from these using packrat\n\n1. Define local repositories\n\n    packrat::repos_add_local( local=\"/home/dp/docs/library/drat\", overwrite=TRUE ) \n\n2. Install packages \n\n    install.packages( \"pkgName\" ) \n    packrat::install_local( \"pkgName\" ) \n\n3. Snapshot \n\n    packrat::status() \n    packrat::snapshot() \n\n4. Check that local repositories are portable\n\n\n\n## Snapshot and Bundle\n\nBundles should not include.lib unless deploying to the same architecture. The probably do not \nneed other bundles.\n\n   # packrat::snapshot()\n   f <- packrat::bundle( include.lib = FALSE, overwrite = TRUE, include.bundles = FALSE  )\n\n\n### With git\n\nPackrat project can large since the keep the source and can optionally keep \nthe compiled library code and bundles  \n\n\n## TODO \n\n- Understand differences between:\n  - `install.packages`\n  - `packrat::install[_local]`\n  - `devtools::install[_*]`\n\n# See Also \n\nFor deploying packrat projects into a dockerized container see [deploy-packrat-to-shiny](deploy-packrat-to-shiny.md)\n\n\n## References\n\n- [packrat](https://rstudio.github.io/packrat/)\n\n\n",
    "created" : 1526520449243.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3669444968",
    "id" : "5F2AF764",
    "lastKnownWriteTime" : 1526520280,
    "last_content_update" : 1526520280,
    "path" : "~/dp/products/training/uc-extensions/csx415/use-packrat.md",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "markdown"
}